# -*- coding: utf-8 -*-
"""capstone

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N-ePD-iZPeiUfRvtziAE_8zBH52Q-L5W
"""

import numpy as np
import pandas as pd
import sklearn

data_sample =  pd.read_csv("input.txt",sep=',',header = None)
print("Input data")
print(data_sample)
print("=============================================")
data_output = pd.read_csv("output.txt",sep = '|', header = None)
print("Output data")
print(data_output[:][0])
print(data_output)

import matplotlib.pyplot as plt
plt.plot(range(100000),data_output[:][0])
plt.show()

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(data_sample,data_output[:][0], random_state=42)

from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(x_train,y_train)
lr_train = lr.score(x_train,y_train)
lr_test = lr.score(x_test,y_test)
print("Training set score: {:.2f}".format(lr_train))
print("Test set score: {:.2f}".format(lr_test))

from sklearn.model_selection import cross_val_score
lr_scores = cross_val_score(lr,data_sample,data_output[:][0],cv=5)
print(lr_scores,lr_scores.mean())

from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
gnb.fit(x_train, y_train)
gnb_train = gnb.score(x_train,y_train)
gnb_test = gnb.score(x_test,y_test)
print("Training set score: {:.2f}".format(gnb_train))
print("Test set score: {:.2f}".format(gnb_test))

svmfrom sklearn import svm
regr = svm.SVR()
regr.fit(x_train, y_train)
regr_train = regr.score(x_train,y_train)
regr_test = regr.score(x_test,y_test)
print("Training set score: {:.2f}".format(regr_train))
print("Test set score: {:.2f}".format(regr_test))

from sklearn.ensemble import GradientBoostingRegressor
est = GradientBoostingRegressor(n_estimators=150, learning_rate=0.01,max_depth=60, random_state=42, loss='ls')
est.fit(x_train, y_train)
est_train = est.score(x_train,y_train)
est_test = est.score(x_test,y_test)
print("Training set score: {:.2f}".format(est_train))
print("Test set score: {:.2f}".format(est_test))

from sklearn import tree
clf = tree.DecisionTreeRegressor()
clf = clf.fit(x_train, y_train)
clf_train = clf.score(x_train,y_train)
clf_test = clf.score(x_test,y_test)
print("Training set score: {:.2f}".format(clf_train))
print("Test set score: {:.2f}".format(clf_test))





y_data = data_output[1].str.split(':')
print(y_data)









y = []
for i in range(len(y_data)):
  ls = []
  for j in range(len(y_data[i])):
    if y_data[i][j][-1] == 'C':
      ls.append('C')
    elif y_data[i][j][-1] == 'D':
      ls.append('D')
  y.append(ls)

y